{"version":3,"file":"static/js/295.1f6330eb.chunk.js","mappings":"qKAuDA,IArDA,SAAqBA,GACjB,IAOA,GAA8BC,EAAAA,EAAAA,UAPR,CAClBC,KAAM,GACNC,MAAO,GACPC,KAAM,GACNC,YAAY,IAGhB,eAAOC,EAAP,KAAgBC,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,WACFR,EAAMM,SACNC,GAAW,kBAAID,GAAYN,EAAMM,YAEtC,CAACN,EAAMM,UAEV,IAAMG,EAAuB,SAAC,GAAqD,IAAD,IAAlDC,cAAiBC,EAAiC,EAAjCA,GAAKC,EAA4B,EAA5BA,MAAOR,EAAqB,EAArBA,KAAMS,EAAe,EAAfA,QAC/DN,GAAW,kBACJD,GADG,cAELK,EAAe,aAATP,EAAuBS,EAAUD,MAIhD,OACI,gBAAKE,UAAU,eAAf,UACI,kBAAMC,SAAU,SAACC,GAAD,OAAWhB,EAAMe,SAASC,EAAOV,IAAjD,WACI,iBAAKQ,UAAU,aAAf,WACI,kBAAOG,QAAQ,OAAOH,UAAU,aAAhC,qBACA,kBAAOV,KAAK,OAAOO,GAAG,OAAOC,MAAON,EAAQJ,KAAMY,UAAU,eAAeI,UAAQ,EAACC,SAAUV,QAElG,iBAAKK,UAAU,aAAf,WACI,kBAAOG,QAAQ,QAAQH,UAAU,aAAjC,wBACA,kBAAOV,KAAK,SAASO,GAAG,QAAQC,MAAON,EAAQH,MAAOW,UAAU,eAAeI,UAAQ,EAACC,SAAUV,QAEtG,iBAAKK,UAAU,aAAf,WACI,kBAAOG,QAAQ,OAAOH,UAAU,aAAhC,qBACA,oBAAQH,GAAG,OAAOC,MAAON,EAAQF,KAAMU,UAAU,eAAeM,YAAY,YAAYF,UAAQ,EAACC,SAAUV,EAA3G,WACI,mBAAQG,MAAM,GAAd,qBACA,mBAAQA,MAAM,WAAd,uBACA,mBAAQA,MAAM,SAAd,2BAGR,iBAAKE,UAAU,aAAf,WACI,kBAAOG,QAAQ,OAAOH,UAAU,aAAhC,yBACA,kBAAOV,KAAK,WAAWO,GAAG,aAAaE,QAASP,EAAQD,WAAYc,SAAUV,QAGlF,mBAAQL,KAAK,SAAb,SAAuBJ,EAAMM,QAAU,SAAW,kB,sGCnBlE,UAxBA,WACI,IAAYe,GAAcC,EAAAA,EAAAA,MAAlBX,GACR,GAAsCY,EAAAA,EAAAA,YAAWC,EAAAA,GAAjD,eAAUC,EAAV,KAAUA,YAAeC,EAAzB,KACA,GAA8BzB,EAAAA,EAAAA,UAAS,IAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACIoB,GAAWC,EAAAA,EAAAA,MAef,OAbApB,EAAAA,EAAAA,YAAU,WACN,GAAIa,EAAW,CACX,IAAIQ,EAAkBJ,EAAYK,MAAK,qBAAGnB,KAAgBU,KAC1Dd,EAAWsB,MAEhB,KASC,SAAC,IAAD,CAAad,SAPY,SAACC,EAAOV,GACjCU,EAAMe,iBACNL,EAASM,EAAAA,GAAoBX,EAAWf,IACxCqB,EAAS,MAIoCrB,SAAO,UAAOA,O,iHCxBtD2B,EAAgB,SAACtB,GAC1B,MAAO,CACHP,KAAM8B,EAAAA,EACNvB,GAAAA,IAIKwB,EAAc,SAACxB,EAAIL,GAC5B,MAAO,CACHF,KAAM8B,EAAAA,GACNvB,GAAAA,EACAL,QAAAA,IAIK8B,EAAa,SAACC,GACvB,MAAO,CACHjC,KAAM8B,EAAAA,GACNG,QAAAA","sources":["containers/ContactForm/ContactForm.js","containers/EditContact/EditContact.js","context/action.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nfunction ContactForm(props) {\r\n    const INITIAL_STATE = {\r\n        name: '',\r\n        phone: '',\r\n        type: '',\r\n        isWhatsApp: false,\r\n    }\r\n\r\n    const [details, setDetails] = useState(INITIAL_STATE);\r\n\r\n    useEffect(() => {\r\n        if (props.details) {\r\n            setDetails({...details, ...props.details })\r\n        }\r\n    }, [props.details])\r\n    \r\n    const detailsChangeHandler = ({ currentTarget: { id , value, type, checked }}) => {\r\n        setDetails({\r\n            ...details,\r\n            [id]: (type === 'checkbox') ? checked : value\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='contact-form'>\r\n            <form onSubmit={(event) => props.onSubmit(event, details)}>\r\n                <div className='form-group'>\r\n                    <label htmlFor='name' className='form-label'>Name: </label>\r\n                    <input type='text' id='name' value={details.name} className='form-control' required onChange={detailsChangeHandler}/>\r\n                </div>\r\n                <div className='form-group'>\r\n                    <label htmlFor='phone' className='form-label'>Contact: </label>\r\n                    <input type='number' id='phone' value={details.phone} className='form-control' required onChange={detailsChangeHandler}/>\r\n                </div>\r\n                <div className='form-group'>\r\n                    <label htmlFor='type' className='form-label'>Type: </label>\r\n                    <select id=\"type\" value={details.type} className='form-control' placeholder='Select...' required onChange={detailsChangeHandler}>\r\n                        <option value=\"\">Select</option>\r\n                        <option value=\"Personal\">Personal</option>\r\n                        <option value=\"Office\">Office</option>\r\n                    </select>\r\n                </div>\r\n                <div className='form-group'>\r\n                    <label htmlFor='type' className='form-label'>Whatsapp: </label>\r\n                    <input type=\"checkbox\" id=\"isWhatsApp\" checked={details.isWhatsApp} onChange={detailsChangeHandler}/>\r\n                </div>\r\n\r\n                <button type='submit'>{props.details ? 'Update' : 'Submit'}</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactForm","import React, { useContext, useEffect, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { Context } from '../../context/GlobalContext';\r\nimport ContactForm from '../ContactForm/ContactForm'\r\nimport * as Actions from '../../context/action';\r\n\r\nfunction EditContact() {\r\n    const { id: contactId } = useParams();\r\n    const [ { contactList }, dispatch ] = useContext(Context);\r\n    const [details, setDetails] = useState({});\r\n    let navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (contactId) {\r\n            let requiredDetails = contactList.find(({ id }) => id === contactId);\r\n            setDetails(requiredDetails)\r\n        }\r\n    }, []);\r\n\r\n    const submitDetailsHandler = (event, details) => {\r\n        event.preventDefault();\r\n        dispatch(Actions.editContact(contactId, details))\r\n        navigate('/')\r\n    }\r\n\r\n    return (\r\n        <ContactForm onSubmit={submitDetailsHandler} details={{ ...details }}/>\r\n    )\r\n}\r\n\r\nexport default EditContact","import * as Contact from '../Constant';\r\n\r\nexport const deleteContact = (id) => {\r\n    return {\r\n        type: Contact.DELETE_CONTACT,\r\n        id\r\n    }\r\n}\r\n\r\nexport const editContact = (id, details) => {\r\n    return {\r\n        type: Contact.EDIT_CONTACT,\r\n        id,\r\n        details\r\n    }\r\n}\r\n\r\nexport const addContact = (payload) => {\r\n    return {\r\n        type: Contact.ADD_CONTACT,\r\n        payload\r\n    }\r\n}"],"names":["props","useState","name","phone","type","isWhatsApp","details","setDetails","useEffect","detailsChangeHandler","currentTarget","id","value","checked","className","onSubmit","event","htmlFor","required","onChange","placeholder","contactId","useParams","useContext","Context","contactList","dispatch","navigate","useNavigate","requiredDetails","find","preventDefault","Actions","deleteContact","Contact","editContact","addContact","payload"],"sourceRoot":""}