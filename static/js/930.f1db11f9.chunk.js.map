{"version":3,"file":"static/js/930.f1db11f9.chunk.js","mappings":"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","sources":["../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v1.js","containers/AddContact/AddContact.js","containers/ContactForm/ContactForm.js","context/action.js"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;","import React, { useContext } from 'react'\r\nimport { Context } from '../../context/GlobalContext';\r\nimport { v1 as uuidv1 } from 'uuid';\r\nimport ContactForm from '../ContactForm/ContactForm';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport * as Actions from '../../context/action';\r\n\r\nfunction AddContact() {\r\n\r\n    const [, dispatch] = useContext(Context);\r\n    let navigate = useNavigate();\r\n\r\n    const submitDetailsHandler = (event, details) => {\r\n        event.preventDefault();\r\n        let payload = {\r\n            id: uuidv1(),\r\n            ...details\r\n        }\r\n        dispatch(Actions.addContact(payload));\r\n        navigate('/allContacts')\r\n    }   \r\n\r\n    return ( \r\n        <div className='formContainer'>\r\n            <ContactForm onSubmit={submitDetailsHandler}/> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddContact","import React, { useEffect, useState } from 'react'\r\n\r\nfunction ContactForm(props) {\r\n    const INITIAL_STATE = {\r\n        name: '',\r\n        phone: '',\r\n        type: '',\r\n        isWhatsApp: false,\r\n    }\r\n\r\n    const [details, setDetails] = useState(INITIAL_STATE);\r\n\r\n    useEffect(() => {\r\n        if (props.details) {\r\n            setDetails({...details, ...props.details })\r\n        }\r\n    }, [props.details])\r\n    \r\n    const detailsChangeHandler = ({ currentTarget: { id , value, type, checked }}) => {\r\n        setDetails({\r\n            ...details,\r\n            [id]: (type === 'checkbox') ? checked : value\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='contact-form'>\r\n            <form onSubmit={(event) => props.onSubmit(event, details)}>\r\n                <div className='form-group'>\r\n                    <label htmlFor='name' className='form-label'>Name: </label>\r\n                    <input type='text' id='name' value={details.name} className='form-control' required onChange={detailsChangeHandler}/>\r\n                </div>\r\n                <div className='form-group'>\r\n                    <label htmlFor='phone' className='form-label'>Contact: </label>\r\n                    <input type='number' id='phone' value={details.phone} className='form-control' required onChange={detailsChangeHandler}/>\r\n                </div>\r\n                <div className='form-group'>\r\n                    <label htmlFor='type' className='form-label'>Type: </label>\r\n                    <select id=\"type\" value={details.type} className='form-control' placeholder='Select...' required onChange={detailsChangeHandler}>\r\n                        <option value=\"\">Select</option>\r\n                        <option value=\"personal\">Personal</option>\r\n                        <option value=\"office\">Office</option>\r\n                    </select>\r\n                </div>\r\n                <div className='form-group'>\r\n                    <label htmlFor='type' className='form-label'>Whatsapp: </label>\r\n                    <input type=\"checkbox\" id=\"isWhatsApp\" checked={details.isWhatsApp} onChange={detailsChangeHandler}/>\r\n                </div>\r\n\r\n                <button type='submit'>{props.details ? 'Update' : 'Submit'}</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactForm","import * as Contact from '../Constant';\r\n\r\nexport const deleteContact = (id) => {\r\n    return {\r\n        type: Contact.DELETE_CONTACT,\r\n        id\r\n    }\r\n}\r\n\r\nexport const editContact = (id, details) => {\r\n    return {\r\n        type: Contact.EDIT_CONTACT,\r\n        id,\r\n        details\r\n    }\r\n}\r\n\r\nexport const addContact = (payload) => {\r\n    return {\r\n        type: Contact.ADD_CONTACT,\r\n        payload\r\n    }\r\n}"],"names":["getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","uuid","REGEX","byteToHex","i","push","toString","substr","_nodeId","_clockseq","arr","offset","arguments","length","undefined","toLowerCase","validate","TypeError","_lastMSecs","_lastNSecs","options","buf","b","Array","node","clockseq","seedBytes","random","msecs","Date","now","nsecs","dt","tl","tmh","n","stringify","useContext","Context","dispatch","navigate","useNavigate","className","ContactForm","onSubmit","event","details","preventDefault","payload","id","uuidv1","Actions","props","useState","name","phone","type","isWhatsApp","setDetails","useEffect","detailsChangeHandler","currentTarget","value","checked","htmlFor","required","onChange","placeholder","deleteContact","Contact","editContact","addContact"],"sourceRoot":""}